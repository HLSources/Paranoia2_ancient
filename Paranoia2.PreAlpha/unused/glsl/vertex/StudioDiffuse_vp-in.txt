/*
StudioDiffuse_vp.glsl - process normal surfaces in studiomodel
Copyright (C) 2014 Uncle Mike

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/

#version 130

#define STUDIO_NF_FLATSHADE		1
#define STUDIO_NF_CHROME		2
#define STUDIO_NF_FULLBRIGHT		4
#define STUDIO_NF_COLORMAP		8	// can changed by colormap command
#define STUDIO_NF_BLENDED		16	// rendering as semiblended
#define STUDIO_NF_ADDITIVE		32	// rendering with additive mode
#define STUDIO_NF_TRANSPARENT		64	// use texture with alpha channel

#define MAXSTUDIOBONES		128

attribute vec3		attr_Position;
attribute vec2		attr_TexCoord0;
attribute vec3		attr_Normal;
attribute float		attr_BoneIndexes;

uniform mat4		u_WorldViewProjectionMatrix;
uniform mat4		u_BoneMatrix[MAXSTUDIOBONES];
uniform vec3		u_LightDir;
uniform vec3		u_LightDiffuse;
uniform vec3		u_LightAmbient;
uniform float		u_LambertValue;
uniform vec3		u_ViewOrigin;
uniform vec3		u_ViewRight;
uniform int		u_FaceFlags;
uniform vec2		u_Generic0;

varying vec3		var_Normal;
varying vec3		var_Color;
varying vec2		var_TexCoord;

void main( void )
{
	vec4 position = vec4( 0.0, 0.0, 0.0, 1.0 );

	// compute hardware skinning
	mat4 boneMatrix = u_BoneMatrix[int(attr_BoneIndexes)];
	position.xyz = ( boneMatrix * vec4( attr_Position, 1.0 )).xyz;
	var_Normal = ( boneMatrix * vec4( attr_Normal, 0.0 )).xyz;

	// transform vertex position into homogenous clip-space
	gl_Position = u_WorldViewProjectionMatrix * position;

	if( bool( u_FaceFlags & STUDIO_NF_FULLBRIGHT ))
	{
		var_Color = vec3( 1.0, 1.0, 1.0 );
	}
	else if( bool( u_FaceFlags & STUDIO_NF_FLATSHADE ))
	{
		// compute vertex lighting (ambient only)
		var_Color = u_LightAmbient + u_LightDiffuse * 0.8;
	}
	else
	{
		// compute vertex lighting
		var_Color = u_LightAmbient;

		float lightcos = min( dot( var_Normal, u_LightDir ), 1.0 ); // -1 colinear, 1 opposite
		float r = max( 1.0, u_LambertValue );

		lightcos = (lightcos + ( r - 1.0 )) / r; // do modified hemispherical lighting
		if( lightcos > 0.0 ) var_Color += (u_LightDiffuse * lightcos);

		// catch negative lighting
		var_Color.x = max( 0.0, var_Color.x );
		var_Color.y = max( 0.0, var_Color.y );
		var_Color.z = max( 0.0, var_Color.z );

		// normalize light	
		float maxIllum = max( var_Color.x, max( var_Color.y, var_Color.z ));
		if( maxIllum > 1.0 ) var_Color *= ( 1.0 / maxIllum );
	}

	if( bool( u_FaceFlags & STUDIO_NF_CHROME ))
	{
		// compute chrome texcoords
		vec3 origin = normalize( -u_ViewOrigin + vec3( boneMatrix[3] ));

		vec3 chromeup = normalize( cross( origin, -u_ViewRight ));
		vec3 chromeright = normalize( cross( origin, chromeup ));
		chromeup = -chromeup;	// GoldSrc rules

		// calc s coord
		var_TexCoord.x = ( dot( var_Normal, chromeright ) + 1.0 ) * 32.0 * attr_TexCoord0.x;

		// calc t coord
		var_TexCoord.y = ( dot( var_Normal, chromeup ) + 1.0 ) * 32.0 * attr_TexCoord0.y;
	}
	else
	{
		var_TexCoord = attr_TexCoord0;
	}
}