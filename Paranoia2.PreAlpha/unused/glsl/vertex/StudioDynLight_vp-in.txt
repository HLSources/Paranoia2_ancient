/*
StudioDynLight_vp.glsl - directional and omnidirectional lighting program
Copyright (C) 2014 Uncle Mike

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/

#version 130

#define STUDIO_NF_FLATSHADE		1
#define STUDIO_NF_CHROME		2
#define STUDIO_NF_FULLBRIGHT		4
#define STUDIO_NF_COLORMAP		8	// can changed by colormap command
#define STUDIO_NF_BLENDED		16	// rendering as semiblended
#define STUDIO_NF_ADDITIVE		32	// rendering with additive mode
#define STUDIO_NF_TRANSPARENT		64	// use texture with alpha channel

#define MAXSTUDIOBONES		128

attribute vec3		attr_Position;
attribute vec3		attr_Normal;
attribute float		attr_BoneIndexes;
attribute vec2		attr_TexCoord0;

uniform int		u_PointLight;
uniform vec3		u_LightDir;
uniform vec3		u_LightOrigin;
uniform vec3		u_ViewOrigin;
uniform vec3		u_ViewRight;
uniform int		u_FaceFlags;
uniform mat4		u_WorldViewProjectionMatrix;
uniform mat4		u_BoneMatrix[MAXSTUDIOBONES];

varying vec2		var_TexCoord;
varying float		var_LightCos;
varying vec4		var_ProjCoord[3];

void main( void )
{
	vec4 position = vec4( 0.0, 0.0, 0.0, 1.0 );

	// compute hardware skinning
	mat4 boneMatrix = u_BoneMatrix[int(attr_BoneIndexes)];
	position.xyz = ( boneMatrix * vec4( attr_Position, 1.0 )).xyz;

	vec3 vec_Normal = ( boneMatrix * vec4( attr_Normal, 0.0 )).xyz;

	// transform vertex position into homogenous clip-space
	gl_Position = u_WorldViewProjectionMatrix * position;

	vec3 vec_LightDir;

	if( bool( u_PointLight ))
	{
		// compute texcoords for attenuationXY
		var_ProjCoord[0].s = dot( position, gl_ObjectPlaneS[0] );
		var_ProjCoord[0].t = dot( position, gl_ObjectPlaneT[0] );

		// compute texcoords for attenuationZ texture
		var_ProjCoord[1].s = dot( position, gl_ObjectPlaneS[1] );

		// compute lightdir for omnidirectional light
		vec_LightDir = normalize( u_LightOrigin - position.xyz );
	}
	else
	{
		vec4 texCoord;

		// compute texcoords for projection texture
		texCoord.s = dot( position, gl_ObjectPlaneS[0] );
		texCoord.t = dot( position, gl_ObjectPlaneT[0] );
		texCoord.p = dot( position, gl_ObjectPlaneR[0] );
		texCoord.q = dot( position, gl_ObjectPlaneQ[0] );

		var_ProjCoord[0] = gl_TextureMatrix[0] * texCoord;

		// compute texcoords for attenuation Z texture
		var_ProjCoord[1].s = dot( position, gl_ObjectPlaneS[1] );

		var_ProjCoord[2] = gl_TextureMatrix[2] * texCoord;

		vec_LightDir = u_LightDir;
	}

	if( bool( u_FaceFlags & STUDIO_NF_FLATSHADE ))
	{
		// fixed normal
		var_LightCos = 0.8;
	}
	else
	{
		// helper to kill backward lighting
		var_LightCos = clamp( dot( vec_Normal, vec_LightDir ), -1.0, 1.0 ); // -1 colinear, 1 opposite
	}

	if( bool( u_FaceFlags & STUDIO_NF_CHROME ))
	{
		// compute chrome texcoords
		vec3 origin = normalize( -u_ViewOrigin + vec3( boneMatrix[3] ));

		vec3 chromeup = normalize( cross( origin, -u_ViewRight ));
		vec3 chromeright = normalize( cross( origin, chromeup ));
		chromeup = -chromeup;	// GoldSrc rules

		// calc s coord
		var_TexCoord.x = ( dot( vec_Normal, chromeright ) + 1.0 ) * 32.0 * attr_TexCoord0.x;

		// calc t coord
		var_TexCoord.y = ( dot( vec_Normal, chromeup ) + 1.0 ) * 32.0 * attr_TexCoord0.y;
	}
	else
	{
		var_TexCoord = attr_TexCoord0;
	}
}