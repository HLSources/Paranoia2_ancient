/*
StudioPOMDynLight_fp.glsl - directional and omnidirectional lighting program with parallax mapping
Copyright (C) 2014 Uncle Mike

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/

#version 130

#define STUDIO_NF_FLATSHADE		1
#define STUDIO_NF_CHROME		2
#define STUDIO_NF_FULLBRIGHT		4
#define STUDIO_NF_COLORMAP		8	// can changed by colormap command
#define STUDIO_NF_BLENDED		16	// rendering as semiblended
#define STUDIO_NF_ADDITIVE		32	// rendering with additive mode
#define STUDIO_NF_TRANSPARENT		64	// use texture with alpha channel

uniform sampler2D		u_ProjectMap;
uniform sampler1D		u_AttnZMap;
uniform sampler2D		u_ColorMap;
uniform sampler2D		u_NormalMap;
uniform sampler2D		u_GlossMap;
uniform sampler2D		u_DepthMap;
uniform sampler2DShadow	u_ShadowMap;

uniform vec3		u_LightDiffuse;
uniform int		u_FaceFlags;
uniform int		u_PointLight;
uniform int		u_ShadowMode;
uniform int		u_ParallaxMode;
uniform vec2		u_ParallaxScale;
uniform int		u_ParallaxSteps;
uniform float		u_GlossExponent;
uniform float		u_ScreenWidth;	// shadowmap width
uniform float		u_ScreenHeight;	// shadowmap height

varying vec2		var_TexCoord;
varying mat3		var_OS2TSMatrix;
varying vec3		var_ViewDir;
varying vec3		var_LightDir;

#define u_AttnXYMap		u_ProjectMap	// just for consistency

float ComputeShadow( void )
{
	if( u_ShadowMode == 0 || bool( u_FaceFlags & STUDIO_NF_FULLBRIGHT ) || bool( u_PointLight ))
	{
		// no shadows
		return 1.0;
	}
	else
	{
		float dtW  = 1.0 / u_ScreenWidth;
		float dtH  = 1.0 / u_ScreenHeight;
		vec3 coord = vec3( gl_TexCoord[2].xyz / gl_TexCoord[2].w );

		coord.s = float( clamp( float( coord.s ), dtW, 1.0 - dtW ));
		coord.t = float( clamp( float( coord.t ), dtH, 1.0 - dtH ));
		coord.r = float( clamp( float( coord.r ), 0.0, 1.0 ));

		float shadow0 = float( shadow2D( u_ShadowMap, coord ).r );

		// PCF 2x2
		if( u_ShadowMode > 1 )
		{
			vec3 coord2 = coord + vec3( 0.0, dtH, 0.0 );
			float shadow1 = float( shadow2D( u_ShadowMap, coord2 ).r );

			coord2 = coord + vec3( dtW, dtH, 0.0 );
			float shadow2 = float( shadow2D( u_ShadowMap, coord2 ).r );

			coord2 = coord + vec3( dtW, 0.0, 0.0 );
			float shadow3 = float( shadow2D( u_ShadowMap, coord2 ).r );

			// PCF 3x3
			if( u_ShadowMode > 2 )
			{
				coord2 = coord + vec3( -dtW, 0.0, 0.0 );
				float shadow4 = float( shadow2D( u_ShadowMap, coord2 ).r );

				coord2 = coord + vec3( -dtW, -dtH, 0.0 );
				float shadow5 = float( shadow2D( u_ShadowMap, coord2 ).r );

				coord2 = coord + vec3( 0.0, -dtH, 0.0 );
				float shadow6 = float( shadow2D( u_ShadowMap, coord2 ).r );

				coord2 = coord + vec3( dtW, -dtH, 0.0 );
				float shadow7 = float( shadow2D( u_ShadowMap, coord2 ).r );

				coord2 = coord + vec3( -dtW, dtH, 0.0 );
				float shadow8 = float( shadow2D( u_ShadowMap, coord2 ).r );

				return (shadow0 + shadow1 + shadow2 + shadow3 + shadow4 + shadow5 + shadow6 + shadow7 + shadow8) * 0.11;
			}
			else
			{
				return (shadow0 + shadow1 + shadow2 + shadow3) * 0.25;
			}
		}
		else
		{
			return shadow0;
		}
	}
}

float CalcHeight( const in vec2 texCoord )
{
	return ( texture2D( u_DepthMap, texCoord ).r );
}

vec2 CalcParallaxOffset( const in vec2 texCoord, const in vec3 viewVec )
{
	if( u_ParallaxMode > 1 )
	{
		// Parallax Occlusion Maping
		// high quality, uses Crysis™ shader.

		float step = 1.0 / float( u_ParallaxSteps );
		vec2 delta = 2.0 * u_ParallaxScale * viewVec.xy / ( -viewVec.z * float( u_ParallaxSteps ));
		float NB0 = CalcHeight( texCoord );
		float height = 1.0 - step;
		vec2 offset = texCoord + delta;
		float NB1 = CalcHeight( offset );

		for( int i = 0; i < u_ParallaxSteps; i++ )
		{
			if( NB1 >= height )
				break;

			NB0 = NB1;
			height -= step;
			offset += delta;
			NB1 = CalcHeight( offset );
		}

		vec2 offsetBest = offset;
		float error = 1.0;
		float t1 = height;
		float t0 = t1 + step;
		float delta1 = t1 - NB1;
		float delta0 = t0 - NB0;

		vec4 intersect = vec4( delta * float( u_ParallaxSteps ), delta * float( u_ParallaxSteps ) + texCoord );

		for( int i = 0; i < 10; i++ )
		{
			if( abs( error ) <= 0.01 )
				break;

			float denom = delta1 - delta0;
			float t = ( t0 * delta1 - t1 * delta0 ) / denom;
			offsetBest = -t * intersect.xy + intersect.zw;

			float NB = CalcHeight( offsetBest );

			error = t - NB;
			if( error < 0.0 )
			{
				delta1 = error;
				t1 = t;
			}
			else
			{
				delta0 = error;
				t0 = t;
			}
		}

		return offsetBest;
	}
	else
	{
		// simple fastest parallax mapping
		float offset = texture2D( u_DepthMap, texCoord ).r * 0.04 - 0.02;
		return ( offset * viewVec.xy + texCoord );
	}
}

void main( void )
{
	vec3 specular = vec3( 0.0, 0.0, 0.0 );

	vec2 texcoord = var_TexCoord;

	vec3 light;

	// compute the light term
	if( bool( u_FaceFlags & STUDIO_NF_FULLBRIGHT ))
	{
		light = vec3( 1.0, 1.0, 1.0 );
	}
	else if( bool( u_FaceFlags & STUDIO_NF_FLATSHADE ))
	{
		// ambient lighting
		light = u_LightDiffuse * 0.8;
	}
	else
	{
		if( bool( u_PointLight ))
		{
			light = u_LightDiffuse;

			// attenuation XY (original code using GL_ONE_MINUS_SRC_ALPHA)
			light *= ( 1.0 - texture2D( u_AttnXYMap, gl_TexCoord[0].st ).a );

			// attenuation Z (original code using GL_ONE_MINUS_SRC_ALPHA)
			light *= ( 1.0 - texture1D( u_AttnZMap, gl_TexCoord[1].s ).a );
		}
		else
		{
			light = texture2DProj( u_ProjectMap, gl_TexCoord[0] ).rgb * u_LightDiffuse;

			// linear attenuation texture
			light *= texture1D( u_AttnZMap, gl_TexCoord[1].s ).r;
		}

		// bump mapping

		// compute view direction in tangent space
		vec3 V = normalize( var_ViewDir );

		// compute light direction in tangent space
		vec3 L = normalize( var_LightDir );

		texcoord = CalcParallaxOffset( var_TexCoord, V );

		// compute normal in tangent space from normalmap
		vec3 N = normalize( 2.0 * ( texture2D( u_NormalMap, texcoord ).xyz - 0.5 ));

		// compute the specular term
		specular = texture2D( u_GlossMap, texcoord ).rgb * light;
		specular *= pow( max( dot( reflect( -L, N ), V ), 0.0 ), u_GlossExponent );

		// compute the light term
		light *= max( dot( N, L ), 0.0 );

		if( bool( u_PointLight ) == false )
			light *= shadow2DProj( u_ShadowMap, gl_TexCoord[2] ).r;
	}

	// catch negative lighting
	light.x = max( 0.0, light.x );
	light.y = max( 0.0, light.y );
	light.z = max( 0.0, light.z );

	// normalize light	
	float maxLight = max( light.x, max( light.y, light.z ));
	if( maxLight > 1.0 ) light *= ( 1.0 / maxLight );

	// compute the diffuse term
	vec4 diffuse = texture2D( u_ColorMap, texcoord );

	light *= ComputeShadow();

	diffuse.rgb *= light;
	diffuse.rgb += specular;

	if( bool( u_FaceFlags & STUDIO_NF_TRANSPARENT ) && diffuse.a <= 0.5 )
	{
		discard;
		return;
	}

	if( bool( u_FaceFlags & STUDIO_NF_ADDITIVE ))
	{
		diffuse.a = 0.5;
	}

	diffuse.rgb *= light.rgb;

	diffuse.rgb *= 2.0;	// GL_RGB_SCALE_ARB 2

	// compute final color
	gl_FragColor = diffuse;
}